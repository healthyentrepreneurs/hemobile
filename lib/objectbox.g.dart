// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'objects/db_local/bookdata_model.dart';
import 'objects/db_local/person.dart';
import 'objects/db_local/surveydata_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2071636335355863104),
      name: 'Person',
      lastPropertyId: const IdUid(3, 6067054065389561822),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7912838633354487885),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2825036329518407215),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6067054065389561822),
            name: 'lastName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 7772579751685119461),
      name: 'BookDataModel',
      lastPropertyId: const IdUid(17, 4118266120150617881),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3041597845509711421),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(6, 4288370363377639437),
            name: 'dateCreated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7133055382668836002),
            name: 'bookId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4150634628188313621),
            name: 'chapterId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2399204327402986655),
            name: 'courseId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 8757559800612512697),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 4118266120150617881),
            name: 'isPending',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 6370256248254230843),
      name: 'SurveyDataModel',
      lastPropertyId: const IdUid(10, 2898308432972428142),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3058059922741717765),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7600970345639467834),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7928309474093144180),
            name: 'surveyVersion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3115821303939967234),
            name: 'surveyObject',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4154385520681653703),
            name: 'surveyId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8396546481426844969),
            name: 'isPending',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6784651200416004550),
            name: 'dateCreated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8717965251596105438),
            name: 'courseId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2898308432972428142),
            name: 'country',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 6370256248254230843),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        6244833043311434511,
        5236793113595802384,
        8666901483370918104,
        4981518854943199165,
        7571764420256365849,
        1719227692694861312,
        8483640618417668259,
        1687884775944145274,
        4224238223130849637,
        5881855584240955687,
        8838630008822000510
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Person: EntityDefinition<Person>(
        model: _entities[0],
        toOneRelations: (Person object) => [],
        toManyRelations: (Person object) => {},
        getId: (Person object) => object.id,
        setId: (Person object, int id) {
          object.id = id;
        },
        objectToFB: (Person object, fb.Builder fbb) {
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, firstNameOffset);
          fbb.addOffset(2, lastNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Person(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    BookDataModel: EntityDefinition<BookDataModel>(
        model: _entities[1],
        toOneRelations: (BookDataModel object) => [],
        toManyRelations: (BookDataModel object) => {},
        getId: (BookDataModel object) => object.id,
        setId: (BookDataModel object, int id) {
          object.id = id;
        },
        objectToFB: (BookDataModel object, fb.Builder fbb) {
          final bookIdOffset = fbb.writeString(object.bookId);
          final chapterIdOffset = fbb.writeString(object.chapterId);
          final courseIdOffset = fbb.writeString(object.courseId);
          final userIdOffset = fbb.writeString(object.userId);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addInt64(5, object.dateCreated.millisecondsSinceEpoch);
          fbb.addOffset(12, bookIdOffset);
          fbb.addOffset(13, chapterIdOffset);
          fbb.addOffset(14, courseIdOffset);
          fbb.addOffset(15, userIdOffset);
          fbb.addBool(16, object.isPending);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BookDataModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              bookId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, ''),
              chapterId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, ''),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, ''),
              courseId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, ''),
              isPending: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 36, false))
            ..dateCreated = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));

          return object;
        }),
    SurveyDataModel: EntityDefinition<SurveyDataModel>(
        model: _entities[2],
        toOneRelations: (SurveyDataModel object) => [],
        toManyRelations: (SurveyDataModel object) => {},
        getId: (SurveyDataModel object) => object.id,
        setId: (SurveyDataModel object, int id) {
          object.id = id;
        },
        objectToFB: (SurveyDataModel object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId);
          final surveyVersionOffset = fbb.writeString(object.surveyVersion);
          final surveyObjectOffset = fbb.writeString(object.surveyObject);
          final surveyIdOffset = fbb.writeString(object.surveyId);
          final courseIdOffset = fbb.writeString(object.courseId);
          final countryOffset = fbb.writeString(object.country);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, surveyVersionOffset);
          fbb.addOffset(4, surveyObjectOffset);
          fbb.addOffset(5, surveyIdOffset);
          fbb.addBool(6, object.isPending);
          fbb.addInt64(7, object.dateCreated.millisecondsSinceEpoch);
          fbb.addOffset(8, courseIdOffset);
          fbb.addOffset(9, countryOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SurveyDataModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              surveyVersion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              surveyObject: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              surveyId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              isPending: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false),
              courseId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              country: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''))
            ..dateCreated =
                DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Person] entity fields to define ObjectBox queries.
class Person_ {
  /// see [Person.id]
  static final id = QueryIntegerProperty<Person>(_entities[0].properties[0]);

  /// see [Person.firstName]
  static final firstName =
      QueryStringProperty<Person>(_entities[0].properties[1]);

  /// see [Person.lastName]
  static final lastName =
      QueryStringProperty<Person>(_entities[0].properties[2]);
}

/// [BookDataModel] entity fields to define ObjectBox queries.
class BookDataModel_ {
  /// see [BookDataModel.id]
  static final id =
      QueryIntegerProperty<BookDataModel>(_entities[1].properties[0]);

  /// see [BookDataModel.dateCreated]
  static final dateCreated =
      QueryIntegerProperty<BookDataModel>(_entities[1].properties[1]);

  /// see [BookDataModel.bookId]
  static final bookId =
      QueryStringProperty<BookDataModel>(_entities[1].properties[2]);

  /// see [BookDataModel.chapterId]
  static final chapterId =
      QueryStringProperty<BookDataModel>(_entities[1].properties[3]);

  /// see [BookDataModel.courseId]
  static final courseId =
      QueryStringProperty<BookDataModel>(_entities[1].properties[4]);

  /// see [BookDataModel.userId]
  static final userId =
      QueryStringProperty<BookDataModel>(_entities[1].properties[5]);

  /// see [BookDataModel.isPending]
  static final isPending =
      QueryBooleanProperty<BookDataModel>(_entities[1].properties[6]);
}

/// [SurveyDataModel] entity fields to define ObjectBox queries.
class SurveyDataModel_ {
  /// see [SurveyDataModel.id]
  static final id =
      QueryIntegerProperty<SurveyDataModel>(_entities[2].properties[0]);

  /// see [SurveyDataModel.userId]
  static final userId =
      QueryStringProperty<SurveyDataModel>(_entities[2].properties[1]);

  /// see [SurveyDataModel.surveyVersion]
  static final surveyVersion =
      QueryStringProperty<SurveyDataModel>(_entities[2].properties[2]);

  /// see [SurveyDataModel.surveyObject]
  static final surveyObject =
      QueryStringProperty<SurveyDataModel>(_entities[2].properties[3]);

  /// see [SurveyDataModel.surveyId]
  static final surveyId =
      QueryStringProperty<SurveyDataModel>(_entities[2].properties[4]);

  /// see [SurveyDataModel.isPending]
  static final isPending =
      QueryBooleanProperty<SurveyDataModel>(_entities[2].properties[5]);

  /// see [SurveyDataModel.dateCreated]
  static final dateCreated =
      QueryIntegerProperty<SurveyDataModel>(_entities[2].properties[6]);

  /// see [SurveyDataModel.courseId]
  static final courseId =
      QueryStringProperty<SurveyDataModel>(_entities[2].properties[7]);

  /// see [SurveyDataModel.country]
  static final country =
      QueryStringProperty<SurveyDataModel>(_entities[2].properties[8]);
}
